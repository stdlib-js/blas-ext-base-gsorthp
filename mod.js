// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./mod.d.ts" />
var r="function"==typeof Object.defineProperty?Object.defineProperty:null;var e=function(){try{return r({},"x",{}),!0}catch(r){return!1}},t=Object.defineProperty,n=Object.prototype,o=n.toString,a=n.__defineGetter__,i=n.__defineSetter__,u=n.__lookupGetter__,l=n.__lookupSetter__;var f=t,c=function(r,e,t){var f,c,_,p;if("object"!=typeof r||null===r||"[object Array]"===o.call(r))throw new TypeError("invalid argument. First argument must be an object. Value: `"+r+"`.");if("object"!=typeof t||null===t||"[object Array]"===o.call(t))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+t+"`.");if((c="value"in t)&&(u.call(r,e)||l.call(r,e)?(f=r.__proto__,r.__proto__=n,delete r[e],r[e]=t.value,r.__proto__=f):r[e]=t.value),_="get"in t,p="set"in t,c&&(_||p))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return _&&a&&a.call(r,e,t.get),p&&i&&i.call(r,e,t.set),r},_=e()?f:c;var p=function(r,e,t){_(r,e,{configurable:!1,enumerable:!1,writable:!1,value:t})},v=Number.POSITIVE_INFINITY;var b=function(r){return 0===r&&1/r===v};var y=function(r){return r!=r},d=Math.floor,s=b,j=y,m=d;var g=b,w=y,h=d;var I=function(r,e,t,n){var o,a,i,u,l,f,c,_,p,v;if(r<=0||0===e)return t;for(e<0&&(n*=-1),o=n<0?(1-r)*n:0,f=r,a=m(r/2);;){if(a>0)c=t[o+(a-=1)*n];else{if(0===(f-=1))return t;c=t[_=o+f*n],t[_]=t[o]}for(i=2*(p=a)+1;i<f&&((v=i+1)<f&&((u=t[o+v*n])>(l=t[o+i*n])||j(u)||u===l&&s(u))&&(i+=1),(u=t[o+i*n])>c||j(u)||u===c&&s(u));)t[o+p*n]=u,i=2*(p=i)+1;t[o+p*n]=c}},O=function(r,e,t,n,o){var a,i,u,l,f,c,_,p,v;if(r<=0||0===e)return t;for(e<0&&(o-=(r-1)*(n*=-1)),f=r,a=h(r/2);;){if(a>0)c=t[o+(a-=1)*n];else{if(0===(f-=1))return t;c=t[_=o+f*n],t[_]=t[o]}for(i=2*(p=a)+1;i<f&&((v=i+1)<f&&((u=t[o+v*n])>(l=t[o+i*n])||w(u)||u===l&&g(u))&&(i+=1),(u=t[o+i*n])>c||w(u)||u===c&&g(u));)t[o+p*n]=u,i=2*(p=i)+1;t[o+p*n]=c}};p(I,"ndarray",O);var P=I;export{P as default,O as ndarray};
//# sourceMappingURL=mod.js.map
